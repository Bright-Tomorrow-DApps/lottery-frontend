{"version":3,"sources":["components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["require","PROGRAM_ID","GreetingAccount","counter","random","this","GreetingSchema","Map","kind","fields","HelloAccount","HelloSchema","GREETING_SIZE","borsh","length","connection","establishConnection","a","rpcUrl","Connection","getVersion","version","console","log","establishPayer","publicKey","fees","getBalance","lamports","requestAirdrop","sig","confirmTransaction","toBase58","LAMPORTS_PER_SOL","checkProgram","payerPublicKey","sendTransaction","programId","PublicKey","getAccountInfo","programInfo","Error","executable","GREETING_SEED","createWithSeed","greetedPubkey","getMinimumBalanceForRentExemption","transaction","Transaction","add","SystemProgram","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","signature","getGreeting","getRandom","min","max","Math","floor","SendRequestForLottery","showLottery","lotteryContent","useConnection","useWallet","useCallback","setTimeout","helloAccount","hello","oraclePublicKey","toString","SYSVAR_RENT_PUBKEY","instruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","data","Buffer","from","reportGreetings","onInit","typewriter","contents","typeString","createTypewriterString","pauseFor","deleteAll","callFunction","start","text","color","colors","accountInfo","greeting","InputText","setValue","component","sx","m","width","noValidate","autoComplete","id","multiline","rows","variant","onChange","e","JSON","parse","target","value","StartLottery","setShowLottery","setLotteryContent","onClick","Main","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","React","useState","autoConnect","App","createTheme","palette","mode","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StyledEngineProvider","injectFirst","document","getElementById"],"mappings":"qZAmDAA,EAAQ,KAER,IAAMC,EAAa,+CAGbC,EAGJ,WAAYC,EAASC,GAAS,yBAF9BA,OAAS,EAEoB,KAD7BD,QAAU,EAERE,KAAKF,QAAUA,EACfE,KAAKD,OAASA,GAGZE,EAAiB,IAAIC,IAAI,CAC7B,CACEL,EACA,CACEM,KAAM,SACNC,OAAQ,CACN,CAAC,UAAW,OACZ,CAAC,SAAU,YAKbC,EAEJ,WAAYP,GAAU,yBADtBA,QAAU,EAERE,KAAKF,QAAUA,GAGbQ,EAAc,IAAIJ,IAAI,CAC1B,CAACG,EAAc,CAAEF,KAAM,SAAUC,OAAQ,CAAC,CAAC,UAAW,YAGlDG,EAAgBC,YACpBP,EACA,IAAIJ,GACJY,OAEEC,EAAa,KAEXC,EAAmB,uCAAG,8BAAAC,EAAA,6DACpBC,EAAS,gCACfH,EAAa,IAAII,aAAWD,EAAQ,aAFV,SAGJH,EAAWK,aAHP,OAGpBC,EAHoB,OAI1BC,QAAQC,IAAI,qCAAsCL,EAAQG,GAJhC,2CAAH,qDAOnBG,EAAc,uCAAG,WAAOC,GAAP,mBAAAR,EAAA,6DACjBS,EAAO,EADU,SAaAX,EAAWY,WAAWF,GAbtB,aAajBG,EAbiB,QAcNF,GAdM,iCAgBDX,EAAWc,eAAeJ,EAAWC,EAAOE,GAhB3C,cAgBbE,EAhBa,iBAiBbf,EAAWgB,mBAAmBD,GAjBjB,yBAkBFf,EAAWY,WAAWF,GAlBpB,QAkBnBG,EAlBmB,eAqBrBN,QAAQC,IACN,gBACAE,EAAUO,WACV,aACAJ,EAAWK,mBACX,uBA1BmB,4CAAH,sDA8BdC,EAAY,uCAAG,WAAOC,EAAgBC,GAAvB,2BAAAnB,EAAA,6DAEnBK,QAAQC,IAAR,+BAAoCY,IAE9BE,EAAY,IAAIC,YAAUrC,GAJb,SAMOc,EAAWwB,eAAeF,GANjC,UAOC,QADdG,EANa,8BAQX,IAAIC,MAAM,oBARC,UASPD,EAAYE,WATL,uBAUX,IAAID,MAAJ,6BAVW,eAYnBnB,QAAQC,IAAR,wBAA6Bc,EAAUL,aAGjCW,EAAgB,QAfH,UAgBSL,YAAUM,eACpCT,EACAQ,EACAN,GAnBiB,eAgBbQ,EAhBa,iBAuBU9B,EAAWwB,eAAeM,GAvBpC,WAwBI,OAxBJ,+BAyBjBvB,QAAQC,IAAI,mBAAoBsB,EAAcb,YAzB7B,UA0BMjB,EAAW+B,kCAChClC,GA3Be,eA0BXgB,EA1BW,OA8BXmB,GAAc,IAAIC,eAAcC,IACpCC,gBAAcC,sBAAsB,CAClCC,WAAYjB,EACZkB,WAAYlB,EACZmB,KAAMX,EACNY,iBAAkBV,EAClBjB,WACA4B,MAAO5C,EACPyB,eAtCa,UA0COD,EAAgBW,EAAahC,GA1CpC,eA0CX0C,EA1CW,iBA4CX1C,EAAWgB,mBAAmB0B,EAAW,aA5C9B,4CAAH,wDAsIZC,EAAW,uCAAG,WAAOJ,EAAM7B,EAAWY,GAAxB,SAAApB,EAAA,sEACLqB,YAAUM,eAAenB,EAAW6B,EAAMjB,GADrC,mFAAH,0DAIjB,SAASsB,EAAUC,EAAKC,GACtB,OAAOC,KAAKC,MAAMD,KAAK1D,UAAYyD,EAAMD,EAAM,IAAMA,EAGvD,IAIMI,EAAwB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACpCnD,EAAeoD,cAAfpD,WADyD,EAE1BqD,cAA/B3C,EAFyD,EAEzDA,UAAWW,EAF8C,EAE9CA,gBAEHiC,sBAAW,sBAAC,sBAAApD,EAAA,yDACrBQ,EADqB,wDAG1BH,QAAQC,IAAR,0CAAqCE,IAErCH,QAAQC,IAAR,iCAL0B,SAMpBP,IANoB,cAQ1BM,QAAQC,IAAR,iFAR0B,SASpBC,EAAeC,GATK,cAW1BH,QAAQC,IAAR,4BAX0B,UAYpBW,EAAaT,EAAWW,GAZJ,QAc1BkC,WAAU,sBAAC,0CAAArD,EAAA,6DACHoB,EAAY,IAAIC,YAAUrC,GADvB,SAEmByD,EAAY,QAASjC,EAAWY,GAFnD,cAEHQ,EAFG,OAIH0B,EAAe,IAAI7D,EApPZ,KAqPP8D,EAAQ3D,YAAgBF,EAAa4D,GAGrCE,EAAkB,IAAInC,YAC1B,gDAEFhB,QAAQC,IAAI,WAAYkD,EAAgBC,YACxCpD,QAAQC,IAAI,UAAWoD,qBAAmBD,YAEpCE,EAAc,IAAIC,yBAAuB,CAC7CC,KAAM,CACJ,CAAEC,OAAQlC,EAAemC,UAAU,EAAOC,YAAY,GACtD,CACEF,OAAQN,EACRO,UAAU,EACVC,YAAY,IAGhB5C,YACA6C,KAAMC,EAAOC,KAAKZ,KAGhBzB,GAAc,IAAIC,eAAcC,IAAI2B,GA3B/B,UA6BexC,EAAgBW,EAAahC,GA7B5C,eA6BH0C,EA7BG,iBA+BH1C,EAAWgB,mBAAmB0B,EAAW,aA/BtC,yBAiCH4B,EAAgB5D,GAjCb,4CAkCR,KAhDuB,4CAiDzB,CAACA,EAAWW,EAAiBrB,IAEhC,OAAOkD,EACL,8BACE,cAAC,IAAD,CACEqB,OAAQ,SAACC,GA9DQ,IAACC,EA+DhBD,EACGE,WAAWC,EAAuB,yCAClCC,SAAS,MACTC,YACAH,WAAWC,EAAuB,sCAClCC,SAAS,MACTC,YACAH,WACCC,EAAuB,GAAD,QAvEVF,EAuE+BtB,EAtEhDsB,EAAS7B,EAAU,EAAG6B,EAAS1E,OAAS,KAsEb,OAEvB+E,cAAa,WACZvE,QAAQC,IAAI,+BAEbuE,aAKT,yBAIEJ,EAAyB,SAACK,EAAMC,GACpC,IAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAK5D,OAJKD,IACHA,EAAQC,EAAOtC,EAAU,EAAGsC,EAAOnF,OAAS,KAE9CQ,QAAQC,IAAI,WAAYyE,GAClB,uBAAN,OAA8BA,EAA9B,6BAAwDD,EAAxD,YAGIV,EAAe,uCAAG,WAAO5D,GAAP,qBAAAR,EAAA,6DAChBoB,EAAY,IAAIC,YAAUrC,GADV,SAEMyD,EAAY,QAASjC,EAAWY,GAFtC,cAEhBQ,EAFgB,gBAGI9B,EAAWwB,eAAeM,GAH9B,UAIF,QADdqD,EAHgB,8BAKd,IAAIzD,MAAM,0CALI,cAOhB0D,EAAWtF,cACfP,EACAJ,EACAgG,EAAYhB,MAEd5D,QAAQC,IACNsB,EAAcb,WACd,WACAmE,EAAShG,QACT,UACAgG,EAAS/F,QAjBW,kBAmBf+F,EAAS/F,QAnBM,4CAAH,sDA8ErB,IAAMgG,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACE,cAAC,IAAD,CACEC,UAAU,OACVC,GAAI,CACF,uBAAwB,CAAEC,EAAG,EAAGC,MAAO,SAEzCC,YAAU,EACVC,aAAa,MANf,SAQE,8BACE,cAAC,IAAD,CACEC,GAAG,0BACHC,WAAS,EACTC,KAAM,EACNC,QAAQ,SACRC,SAAU,SAACC,GACTZ,EAASa,KAAKC,MAAMF,EAAEG,OAAOC,gBAQnCC,EAAe,SAAC,GAAwD,IAAtDrD,EAAqD,EAArDA,YAAasD,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,kBAC7CC,EAAUpD,uBAAY,WAC1BkD,GAAe,MAKjB,OAFAjG,QAAQC,IAAI,aAAciG,GAEnBvD,EACL,wBAEA,gCACE,cAACmC,EAAD,CAAWC,SAAUmB,IACrB,cAAC,IAAD,CAAST,QAAQ,YAAYU,QAASA,EAAtC,0CAOSC,IApGf,WAEE,IAAMC,EAAUC,IAAqBC,OAG/BC,EAAWC,mBAAQ,kBAAMC,wBAAcL,KAAU,CAACA,IAIlDM,EAAUF,mBACd,iBAAM,CACJG,cACAC,cACAC,cACAC,YAAe,CACbC,QAAS,CAAEC,SAAU,gDAEvBC,cACAC,YAAgB,CAAEd,YAClBe,YAAyB,CAAEf,eAE7B,CAACA,IArBW,EAwBYgB,IAAMC,SAAS,cAxB3B,gCA8BwBD,IAAMC,UAAS,IA9BvC,mBA8BP3E,EA9BO,KA8BMsD,EA9BN,OA+B8BoB,IAAMC,SAAS,IA/B7C,mBA+BP1E,EA/BO,KA+BSsD,EA/BT,KAiCd,OACE,cAAC,IAAD,CAAoBM,SAAUA,EAA9B,SACE,cAAC,IAAD,CAAgBG,QAASA,EAASY,aAAW,EAA7C,SACE,eAAC,IAAD,WAIE,cAAC7E,EAAD,CACEC,YAAaA,EACbC,eAAgBA,IAElB,cAACoD,EAAD,CACErD,YAAaA,EACbsD,eAAgBA,EAChBC,kBAAmBA,c,+jBC5ZhBsB,MAhBf,WAOE,OANkBC,YAAY,CAC5BC,QAAS,CACPC,KAAM,UAKR,qBAAKC,UAAU,MAAf,SAEE,cAACxB,EAAA,EAAD,OCLSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCAdQ,IAASC,OACP,cAACC,EAAA,EAAD,CAAsBC,aAAW,EAAjC,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.657f4372.chunk.js","sourcesContent":["import React, { useMemo, useCallback } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { default as MButton } from \"@mui/material/Button\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  initAccount,\n  SwitchboardAccountType,\n  createOwnedStateAccount,\n  SWITCHBOARD_DEVNET_PID,\n  SwitchboardInstruction,\n  VrfAccountData,\n  publishSwitchboardAccount,\n  createVrfAccount,\n  parseVrfAccountData,\n  requestRandomness,\n} from \"@switchboard-xyz/switchboard-api\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport bs58 from \"bs58\";\nimport { sign } from \"tweetnacl\";\nimport Typewriter from \"typewriter-effect\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport {\n  WalletModalProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport * as borsh from \"borsh\";\nimport { Button } from \"@solana/wallet-adapter-react-ui/lib/Button\";\n\n// Default styles that can be overridden by your app\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\nconst PROGRAM_ID = \"6f5rui9XC6MufttQVqLN8ukzd4wXzreJATEBFxgcJ6Ui\";\nconst RANDOM_MAX = 1000;\n\nclass GreetingAccount {\n  random = 0;\n  counter = 0;\n  constructor(counter, random) {\n    this.counter = counter;\n    this.random = random;\n  }\n}\nconst GreetingSchema = new Map([\n  [\n    GreetingAccount,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"counter\", \"u32\"],\n        [\"random\", \"u32\"],\n      ],\n    },\n  ],\n]);\nclass HelloAccount {\n  counter = 0;\n  constructor(counter) {\n    this.counter = counter;\n  }\n}\nconst HelloSchema = new Map([\n  [HelloAccount, { kind: \"struct\", fields: [[\"counter\", \"u32\"]] }],\n]);\n\nconst GREETING_SIZE = borsh.serialize(\n  GreetingSchema,\n  new GreetingAccount()\n).length;\n\nlet connection = null;\n\nconst establishConnection = async () => {\n  const rpcUrl = \"https://api.devnet.solana.com\";\n  connection = new Connection(rpcUrl, \"confirmed\");\n  const version = await connection.getVersion();\n  console.log(\"Connection to cluster established:\", rpcUrl, version);\n};\n\nconst establishPayer = async (publicKey) => {\n  let fees = 0;\n  // if (!payer) {\n  //   const {feeCalculator} = await connection.getRecentBlockhash();\n\n  //   // Calculate the cost to fund the greeter account\n  //   fees += await connection.getMinimumBalanceForRentExemption(GREETING_SIZE);\n\n  //   // Calculate the cost of sending transactions\n  //   fees += feeCalculator.lamportsPerSignature * 100; // wag\n  //   payer = utils.getPayer();\n  // }\n\n  let lamports = await connection.getBalance(publicKey);\n  if (lamports < fees) {\n    // If current balance is not enough to pay for fees, request an airdrop\n    const sig = await connection.requestAirdrop(publicKey, fees - lamports);\n    await connection.confirmTransaction(sig);\n    lamports = await connection.getBalance(publicKey);\n  }\n\n  console.log(\n    \"Using account\",\n    publicKey.toBase58(),\n    \"containing\",\n    lamports / LAMPORTS_PER_SOL,\n    \"SOL to pay for fees\"\n  );\n};\n\nconst checkProgram = async (payerPublicKey, sendTransaction) => {\n  // Check if the program has been deployed\n  console.log(`get payer public key ${payerPublicKey}`);\n\n  const programId = new PublicKey(PROGRAM_ID);\n\n  const programInfo = await connection.getAccountInfo(programId);\n  if (programInfo === null) {\n    throw new Error(\"Program get fail\");\n  } else if (!programInfo.executable) {\n    throw new Error(`Program is not executable`);\n  }\n  console.log(`Using program ${programId.toBase58()}`);\n\n  // Derive the address (public key) of a greeting account from the program so that it's easy to find later.\n  const GREETING_SEED = \"hello\";\n  const greetedPubkey = await PublicKey.createWithSeed(\n    payerPublicKey,\n    GREETING_SEED,\n    programId\n  );\n\n  // Check if the greeting account has already been created\n  const greetedAccount = await connection.getAccountInfo(greetedPubkey);\n  if (greetedAccount === null) {\n    console.log(\"Creating account\", greetedPubkey.toBase58());\n    const lamports = await connection.getMinimumBalanceForRentExemption(\n      GREETING_SIZE\n    );\n\n    const transaction = new Transaction().add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: payerPublicKey,\n        basePubkey: payerPublicKey,\n        seed: GREETING_SEED,\n        newAccountPubkey: greetedPubkey,\n        lamports,\n        space: GREETING_SIZE,\n        programId,\n      })\n    );\n\n    const signature = await sendTransaction(transaction, connection);\n\n    await connection.confirmTransaction(signature, \"processed\");\n  }\n};\n\n// function TestWallet() {\n//   const {publicKey, sendTransaction} = useWallet();\n\n//   const requestTestWallet = useCallback(() => {\n//     if (publicKey) {\n//       window.alert(`以連接上Wallet!${publicKey.toBase58()}`);\n//     } else {\n//       window.alert(`請先連接Wallet`);\n//     }\n//   });\n\n//   return <button onClick={requestTestWallet}>測試Wallet連接</button>;\n// }\n\n// function SignMessageButton() {\n//   const {publicKey, signMessage} = useWallet();\n\n//   const onClick = useCallback(async () => {\n//     try {\n//       // `publicKey` will be null if the wallet isn't connected\n//       if (!publicKey) throw new Error('Wallet not connected!');\n//       // `signMessage` will be undefined if the wallet doesn't support it\n//       if (!signMessage)\n//         throw new Error('Wallet does not support message signing!');\n\n//       // Encode anything as bytes\n//       const message = new TextEncoder().encode('Hello, world!');\n//       // Sign the bytes using the wallet\n//       const signature = await signMessage(message);\n//       // Verify that the bytes were signed using the private key that matches the known public key\n//       if (!sign.detached.verify(message, signature, publicKey.toBytes()))\n//         throw new Error('Invalid signature!');\n\n//       alert(`Message signature: ${bs58.encode(signature)}`);\n//     } catch (error) {\n//       alert(`Signing failed: ${error?.message}`);\n//     }\n//   }, [publicKey, signMessage]);\n\n//   return signMessage ? (\n//     <button onClick={onClick} disabled={!publicKey}>\n//       Sign Message\n//     </button>\n//   ) : null;\n// }\n\n// function SignTransactionButton() {\n//   const {publicKey, sendTransaction, connection} = useWallet();\n\n//   const onClick = useCallback(async () => {\n//     try {\n//       // `publicKey` will be null if the wallet isn't connected\n//       if (!publicKey) throw new Error('Wallet not connected!');\n//       // `signMessage` will be undefined if the wallet doesn't support it\n//       if (!sendTransaction)\n//         throw new Error('Wallet does not support message signing!');\n\n//       const programId = new PublicKey(PROGRAM_ID);\n//       const GREETING_SEED = 'hello';\n//       const greetedPubkey = await PublicKey.createWithSeed(\n//         publicKey,\n//         GREETING_SEED,\n//         programId,\n//       );\n\n//       const helloAccount = new HelloAccount(RANDOM_MAX);\n//       const hello = borsh.serialize(HelloSchema, helloAccount);\n//       const instruction = new TransactionInstruction({\n//         keys: [{pubkey: greetedPubkey, isSigner: false, isWritable: true}],\n//         programId,\n//         data: Buffer.from(hello),\n//       });\n\n//       await sendTransaction(new Transaction().add(instruction), connection);\n//     } catch (error) {\n//       alert(`Signing failed: ${error?.message}`);\n//     }\n//   }, [publicKey, sendTransaction, connection]);\n\n//   return sendTransaction ? (\n//     <button onClick={onClick} disabled={!publicKey}>\n//       Sign Transaction\n//     </button>\n//   ) : null;\n// }\n\nconst getGreeting = async (seed, publicKey, programId) => {\n  return await PublicKey.createWithSeed(publicKey, seed, programId);\n};\n\nfunction getRandom(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRamdonContent = (contents) => {\n  return contents[getRandom(0, contents.length - 1)];\n};\n\nconst SendRequestForLottery = ({ showLottery, lotteryContent }) => {\n  const { connection } = useConnection();\n  const { publicKey, sendTransaction } = useWallet();\n\n  const onClick = useCallback(async () => {\n    if (!publicKey) return;\n\n    console.log(`- 取得payer public key: ${publicKey}`);\n\n    console.log(`- 連接鏈中...`);\n    await establishConnection();\n\n    console.log(`- 取得支付手續費使用者資訊...`);\n    await establishPayer(publicKey);\n\n    console.log(`- 檢查program...`);\n    await checkProgram(publicKey, sendTransaction);\n\n    setTimeout(async () => {\n      const programId = new PublicKey(PROGRAM_ID);\n      const greetedPubkey = await getGreeting(\"hello\", publicKey, programId);\n\n      const helloAccount = new HelloAccount(RANDOM_MAX);\n      const hello = borsh.serialize(HelloSchema, helloAccount);\n\n      // let vrfAccount = await createVrfAccount(connection, payerAccount, PID);\n      const oraclePublicKey = new PublicKey(\n        \"HZGjXArakPuCFmxC9ajuDgwgY6vLY269jYoQF4z311jD\"\n      );\n      console.log(\"yorklog0\", oraclePublicKey.toString());\n      console.log(\"yorklog\", SYSVAR_RENT_PUBKEY.toString());\n\n      const instruction = new TransactionInstruction({\n        keys: [\n          { pubkey: greetedPubkey, isSigner: false, isWritable: true },\n          {\n            pubkey: oraclePublicKey,\n            isSigner: false,\n            isWritable: true,\n          },\n        ],\n        programId,\n        data: Buffer.from(hello),\n      });\n\n      let transaction = new Transaction().add(instruction);\n\n      const signature = await sendTransaction(transaction, connection);\n\n      await connection.confirmTransaction(signature, \"processed\");\n\n      await reportGreetings(publicKey);\n    }, 2000);\n  }, [publicKey, sendTransaction, connection]);\n\n  return showLottery ? (\n    <div>\n      <Typewriter\n        onInit={(typewriter) => {\n          typewriter\n            .typeString(createTypewriterString(\"Solana Program 運行中...\"))\n            .pauseFor(1500)\n            .deleteAll()\n            .typeString(createTypewriterString(\"抽獎結果是...\"))\n            .pauseFor(1500)\n            .deleteAll()\n            .typeString(\n              createTypewriterString(`${getRamdonContent(lotteryContent)}!`)\n            )\n            .callFunction(() => {\n              console.log(\"All strings were deleted\");\n            })\n            .start();\n        }}\n      />\n    </div>\n  ) : (\n    <div />\n  );\n};\n\nconst createTypewriterString = (text, color) => {\n  const colors = [\"#8ECAE6\", \"#219EBC\", \"#023047\", \"#FFB703\", \"#FB8500\"];\n  if (!color) {\n    color = colors[getRandom(0, colors.length - 1)];\n  }\n  console.log(\"yorkaqwe\", color);\n  return `<span style=\"color: ${color}; font-size: 7vw\">${text}</span>`;\n};\n\nconst reportGreetings = async (publicKey) => {\n  const programId = new PublicKey(PROGRAM_ID);\n  const greetedPubkey = await getGreeting(\"hello\", publicKey, programId);\n  const accountInfo = await connection.getAccountInfo(greetedPubkey);\n  if (accountInfo === null) {\n    throw new Error(\"Error: cannot find the greeted account\");\n  }\n  const greeting = borsh.deserialize(\n    GreetingSchema,\n    GreetingAccount,\n    accountInfo.data\n  );\n  console.log(\n    greetedPubkey.toBase58(),\n    \"time(s):\",\n    greeting.counter,\n    \"random:\",\n    greeting.random\n  );\n  return greeting.random;\n};\n\nfunction Main() {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: { clientId: \"Get a client ID @ https://developer.tor.us\" },\n      }),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  const [value, setValue] = React.useState(\"Controlled\");\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const [showLottery, setShowLottery] = React.useState(false);\n  const [lotteryContent, setLotteryContent] = React.useState(\"\");\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {/* <WalletDisconnectButton /> */}\n          {/* <SignMessageButton /> */}\n          {/* <SignTransactionButton /> */}\n          <SendRequestForLottery\n            showLottery={showLottery}\n            lotteryContent={lotteryContent}\n          />\n          <StartLottery\n            showLottery={showLottery}\n            setShowLottery={setShowLottery}\n            setLotteryContent={setLotteryContent}\n          />\n          {/* <WalletMultiButton /> */}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nconst InputText = ({ setValue }) => {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"70ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          multiline\n          rows={6}\n          variant=\"filled\"\n          onChange={(e) => {\n            setValue(JSON.parse(e.target.value));\n          }}\n        />\n      </div>\n    </Box>\n  );\n};\n\nconst StartLottery = ({ showLottery, setShowLottery, setLotteryContent }) => {\n  const onClick = useCallback(() => {\n    setShowLottery(true);\n  });\n\n  console.log(\"yorkfghuio\", setLotteryContent);\n\n  return showLottery ? (\n    <div />\n  ) : (\n    <div>\n      <InputText setValue={setLotteryContent} />\n      <MButton variant=\"contained\" onClick={onClick}>\n        進行抽籤\n      </MButton>\n    </div>\n  );\n};\n\nexport default Main;\n","import \"./App.css\";\nimport Main from \"./components/Main\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport * as React from \"react\";\n\nfunction App() {\n  const darkTheme = createTheme({\n    palette: {\n      mode: \"dark\",\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      {/* <ThemeProvider theme={darkTheme}> */}\n      <Main />\n      {/* </ThemeProvider> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { StyledEngineProvider } from \"@mui/material/styles\";\n\nReactDOM.render(\n  <StyledEngineProvider injectFirst>\n    <App />\n  </StyledEngineProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}