{"version":3,"sources":["components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["require","PROGRAM_ID","GreetingAccount","counter","random","this","GreetingSchema","Map","kind","fields","InstructionData","lottery_content","instructionDataSchema","GREETING_SIZE","borsh","length","connection","establishConnection","a","rpcUrl","Connection","getVersion","version","console","log","establishPayer","publicKey","fees","getBalance","lamports","requestAirdrop","sig","confirmTransaction","toBase58","LAMPORTS_PER_SOL","checkProgram","payerPublicKey","sendTransaction","programId","PublicKey","getAccountInfo","programInfo","Error","executable","GREETING_SEED","createWithSeed","greetedPubkey","getMinimumBalanceForRentExemption","transaction","Transaction","add","SystemProgram","createAccountWithSeed","fromPubkey","basePubkey","seed","newAccountPubkey","space","signature","sendTransactionToProgram","letteryContent","getGreeting","instructionData","JSON","stringify","hello","instruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","data","Buffer","from","error","message","getRandom","min","max","Math","floor","isSetRandomNumber","randomNumber","SendRequestForLottery","showLottery","lotteryContent","lotteryWay","setShowLottery","setRandomNumber","useConnection","useWallet","useMemo","isChainLotteryWay","getRandomData","onInit","typewriter","typeString","createTypewriterString","pauseFor","deleteAll","callFunction","start","text","color","colors","accountInfo","greeting","InputText","setValue","defaultInput","component","sx","m","width","noValidate","autoComplete","id","multiline","rows","variant","defaultValue","onChange","e","parse","target","value","isSetLotteryWay","StartLottery","setLotteryContent","setLotteryWay","onClickForFrontendLottery","useCallback","setFrontendLotteryWay","onClickForChainLottery","setChainLotteryWay","onClick","getQueryFromURL","URLSearchParams","window","location","search","Main","network","WalletAdapterNetwork","Devnet","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","lotteryContentFromQuery","get","React","useState","autoConnect","container","justifyContent","spacing","App","createTheme","palette","mode","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StyledEngineProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.c1624072.chunk.js","sourcesContent":["import React, { useMemo, useCallback, useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport { default as MButton } from \"@mui/material/Button\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport Grid from \"@mui/material/Grid\";\nimport { SystemProgram, Transaction } from \"@solana/web3.js\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport Typewriter from \"typewriter-effect\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport {\n  WalletModalProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport * as borsh from \"borsh\";\nimport { Button } from \"@solana/wallet-adapter-react-ui/lib/Button\";\n\n// Default styles that can be overridden by your app\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\n// devnet production\nconst PROGRAM_ID = \"JA6TgMfnxhRFuDuAfsinkgMuxWk7Kmy6EQrwZ3Psb1in\";\nconst RPC_URL = \"https://api.devnet.solana.com\";\n\n// devnet test\n// const PROGRMA_ID = \"3dAAsmoJKWzvuaWhjcUXKmE3V2eAicokxYDQdtc5pNpa\";\n// const RPC_URL = \"https://api.devnet.solana.com\";\n\nclass GreetingAccount {\n  random = 0;\n  counter = 0;\n  constructor(counter, random) {\n    this.counter = counter;\n    this.random = random;\n  }\n}\nconst GreetingSchema = new Map([\n  [\n    GreetingAccount,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"counter\", \"u32\"],\n        [\"random\", \"u32\"],\n      ],\n    },\n  ],\n]);\nclass InstructionData {\n  constructor(counter, lottery_content) {\n    if (!lottery_content) {\n      lottery_content = \"\";\n    }\n    this.counter = counter;\n    this.lottery_content = lottery_content;\n  }\n}\nconst instructionDataSchema = new Map([\n  [\n    InstructionData,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"counter\", \"u32\"],\n        [\"lottery_content\", \"string\"],\n      ],\n    },\n  ],\n]);\n\nconst GREETING_SIZE = borsh.serialize(\n  GreetingSchema,\n  new GreetingAccount()\n).length;\n\nconst INSTRUCTION_SIZE = borsh.serialize(\n  instructionDataSchema,\n  new InstructionData()\n).length;\n\nlet connection = null;\n\nconst establishConnection = async () => {\n  const rpcUrl = RPC_URL;\n  connection = new Connection(rpcUrl, \"confirmed\");\n  const version = await connection.getVersion();\n  console.log(\"Connection to cluster established:\", rpcUrl, version);\n};\n\nconst establishPayer = async (publicKey) => {\n  let fees = 0;\n  // if (!payer) {\n  //   const {feeCalculator} = await connection.getRecentBlockhash();\n\n  //   // Calculate the cost to fund the greeter account\n  //   fees += await connection.getMinimumBalanceForRentExemption(GREETING_SIZE);\n\n  //   // Calculate the cost of sending transactions\n  //   fees += feeCalculator.lamportsPerSignature * 100; // wag\n  //   payer = utils.getPayer();\n  // }\n\n  let lamports = await connection.getBalance(publicKey);\n  if (lamports < fees) {\n    // If current balance is not enough to pay for fees, request an airdrop\n    const sig = await connection.requestAirdrop(publicKey, fees - lamports);\n    await connection.confirmTransaction(sig);\n    lamports = await connection.getBalance(publicKey);\n  }\n\n  console.log(\n    \"Using account\",\n    publicKey.toBase58(),\n    \"containing\",\n    lamports / LAMPORTS_PER_SOL,\n    \"SOL to pay for fees\"\n  );\n};\n\nconst checkProgram = async (payerPublicKey, sendTransaction) => {\n  // Check if the program has been deployed\n  console.log(`get payer public key ${payerPublicKey}`);\n\n  const programId = new PublicKey(PROGRAM_ID);\n\n  const programInfo = await connection.getAccountInfo(programId);\n  if (programInfo === null) {\n    throw new Error(\"Program get fail\");\n  } else if (!programInfo.executable) {\n    throw new Error(`Program is not executable`);\n  }\n  console.log(`Using program ${programId.toBase58()}`);\n\n  // Derive the address (public key) of a greeting account from the program so that it's easy to find later.\n  const GREETING_SEED = \"hello\";\n  const greetedPubkey = await PublicKey.createWithSeed(\n    payerPublicKey,\n    GREETING_SEED,\n    programId\n  );\n\n  // Check if the greeting account has already been created\n  const greetedAccount = await connection.getAccountInfo(greetedPubkey);\n  if (greetedAccount === null) {\n    console.log(\"Creating account\", greetedPubkey.toBase58());\n    const lamports = await connection.getMinimumBalanceForRentExemption(\n      GREETING_SIZE\n    );\n\n    const transaction = new Transaction().add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: payerPublicKey,\n        basePubkey: payerPublicKey,\n        seed: GREETING_SEED,\n        newAccountPubkey: greetedPubkey,\n        lamports,\n        space: GREETING_SIZE,\n        programId,\n      })\n    );\n\n    const signature = await sendTransaction(transaction, connection);\n\n    await connection.confirmTransaction(signature, \"processed\");\n  }\n};\n\n// function TestWallet() {\n//   const {publicKey, sendTransaction} = useWallet();\n\n//   const requestTestWallet = useCallback(() => {\n//     if (publicKey) {\n//       window.alert(`以連接上Wallet!${publicKey.toBase58()}`);\n//     } else {\n//       window.alert(`請先連接Wallet`);\n//     }\n//   });\n\n//   return <button onClick={requestTestWallet}>測試Wallet連接</button>;\n// }\n\n// function SignMessageButton() {\n//   const {publicKey, signMessage} = useWallet();\n\n//   const onClick = useCallback(async () => {\n//     try {\n//       // `publicKey` will be null if the wallet isn't connected\n//       if (!publicKey) throw new Error('Wallet not connected!');\n//       // `signMessage` will be undefined if the wallet doesn't support it\n//       if (!signMessage)\n//         throw new Error('Wallet does not support message signing!');\n\n//       // Encode anything as bytes\n//       const message = new TextEncoder().encode('Hello, world!');\n//       // Sign the bytes using the wallet\n//       const signature = await signMessage(message);\n//       // Verify that the bytes were signed using the private key that matches the known public key\n//       if (!sign.detached.verify(message, signature, publicKey.toBytes()))\n//         throw new Error('Invalid signature!');\n\n//       alert(`Message signature: ${bs58.encode(signature)}`);\n//     } catch (error) {\n//       alert(`Signing failed: ${error?.message}`);\n//     }\n//   }, [publicKey, signMessage]);\n\n//   return signMessage ? (\n//     <button onClick={onClick} disabled={!publicKey}>\n//       Sign Message\n//     </button>\n//   ) : null;\n// }\n\nconst sendTransactionToProgram = async (\n  publicKey,\n  sendTransaction,\n  connection,\n  letteryContent\n) => {\n  // try {\n  //   // `publicKey` will be null if the wallet isn't connected\n  //   if (!publicKey) throw new Error(\"Wallet not connected!\");\n  //   // `signMessage` will be undefined if the wallet doesn't support it\n  //   if (!sendTransaction)\n  //     throw new Error(\"Wallet does not support message signing!\");\n\n  //   const programId = new PublicKey(PROGRAM_ID);\n  //   const GREETING_SEED = \"hello\";\n  //   const greetedPubkey = await PublicKey.createWithSeed(\n  //     publicKey,\n  //     GREETING_SEED,\n  //     programId\n  //   );\n\n  //   const instructionData = new InstructionData(RANDOM_MAX);\n  //   const hello = borsh.serialize(instructionDataSchema, instructionData);\n  //   const instruction = new TransactionInstruction({\n  //     keys: [{ pubkey: greetedPubkey, isSigner: false, isWritable: true }],\n  //     programId,\n  //     data: Buffer.from(hello),\n  //   });\n\n  //   await sendTransaction(new Transaction().add(instruction), connection);\n  // } catch (error) {\n  //   console.error(`Signing failed: ${error?.message}`);\n  // }\n  try {\n    if (!publicKey) throw new Error(\"Wallet not connected\");\n    if (!sendTransaction)\n      throw new Error(\"Wallet does not support message signing\");\n\n    const programId = new PublicKey(PROGRAM_ID);\n    const greetedPubkey = await getGreeting(\"hello\", publicKey, programId);\n\n    const instructionData = new InstructionData(\n      letteryContent.length,\n      JSON.stringify(letteryContent)\n    );\n    const hello = borsh.serialize(instructionDataSchema, instructionData);\n\n    const instruction = new TransactionInstruction({\n      keys: [{ pubkey: greetedPubkey, isSigner: false, isWritable: true }],\n      programId,\n      data: Buffer.from(hello),\n    });\n\n    let transaction = new Transaction().add(instruction);\n    const signature = await sendTransaction(transaction, connection);\n\n    return signature;\n  } catch (error) {\n    console.error(`Signing failed: ${error?.message}`);\n  }\n};\n\nconst getGreeting = async (seed, publicKey, programId) => {\n  return await PublicKey.createWithSeed(publicKey, seed, programId);\n};\n\nfunction getRandom(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRamdonContentNumber = (contents) => {\n  return getRandom(1, contents.length);\n};\n\nconst isSetRandomNumber = (randomNumber) => randomNumber !== -1;\n\nconst SendRequestForLottery = ({\n  showLottery,\n  lotteryContent,\n  lotteryWay,\n  setShowLottery,\n  randomNumber,\n  setRandomNumber,\n}) => {\n  const { connection } = useConnection();\n  const { publicKey, sendTransaction } = useWallet();\n\n  useMemo(async () => {\n    if (\n      !publicKey ||\n      !connection ||\n      !isChainLotteryWay(lotteryWay) ||\n      isSetRandomNumber(randomNumber)\n    )\n      return;\n\n    console.log(`- 取得payer public key: ${publicKey}`);\n\n    console.log(`- 連接鏈中...`);\n    await establishConnection();\n\n    console.log(`- 取得支付手續費使用者資訊...`);\n    await establishPayer(publicKey);\n\n    console.log(`- 檢查program...`);\n    await checkProgram(publicKey, sendTransaction);\n\n    const signature = await sendTransactionToProgram(\n      publicKey,\n      sendTransaction,\n      connection,\n      lotteryContent\n    );\n\n    await connection.confirmTransaction(signature, \"processed\");\n\n    const { random } = await getRandomData(publicKey);\n\n    console.log(`- random number: ${random}`);\n\n    setRandomNumber(random);\n\n    setShowLottery(true);\n  }, [\n    publicKey,\n    sendTransaction,\n    connection,\n    lotteryWay,\n    setRandomNumber,\n    setShowLottery,\n    randomNumber,\n    lotteryContent,\n  ]);\n\n  return showLottery && isSetRandomNumber(randomNumber) ? (\n    <div>\n      <Typewriter\n        onInit={(typewriter) => {\n          typewriter\n            .typeString(createTypewriterString(\"Solana Program 運行中...\"))\n            .pauseFor(1500)\n            .deleteAll()\n            .typeString(createTypewriterString(\"抽出的結果是...\"))\n            .pauseFor(1500)\n            .deleteAll()\n            .typeString(\n              createTypewriterString(`${lotteryContent[randomNumber - 1]}!`)\n            )\n            .callFunction(() => {\n              console.log(\"All strings were deleted\");\n            })\n            .start();\n        }}\n      />\n    </div>\n  ) : (\n    <div />\n  );\n};\n\nconst createTypewriterString = (text, color) => {\n  const colors = [\"#8ECAE6\", \"#219EBC\", \"#023047\", \"#FFB703\", \"#FB8500\"];\n  if (!color) {\n    color = colors[getRandom(0, colors.length - 1)];\n  }\n  return `<span style=\"color: ${color}; font-size: 7vw\">${text}</span>`;\n};\n\nconst getRandomData = async (publicKey) => {\n  const programId = new PublicKey(PROGRAM_ID);\n  const greetedPubkey = await getGreeting(\"hello\", publicKey, programId);\n  const accountInfo = await connection.getAccountInfo(greetedPubkey);\n  if (accountInfo === null) {\n    throw new Error(\"Error: cannot find the greeted account\");\n  }\n  const greeting = borsh.deserialize(\n    GreetingSchema,\n    GreetingAccount,\n    accountInfo.data\n  );\n\n  return greeting.counter;\n};\n\nfunction Main() {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: { clientId: \"Get a client ID @ https://developer.tor.us\" },\n      }),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  let queryFromURL = getQueryFromURL();\n  const lotteryContentFromQuery = queryFromURL.get(\"lotteryContent\");\n\n  const [showLottery, setShowLottery] = React.useState(false);\n  // -1: default\n  const [randomNumber, setRandomNumber] = React.useState(-1);\n  const [lotteryContent, setLotteryContent] = React.useState(\n    lotteryContentFromQuery\n  );\n  // \"\": default, \"frontend\": frontend, \"chain\": chain\n  const [lotteryWay, setLotteryWay] = React.useState(\"\");\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {/* <SignMessageButton /> */}\n          {/* <SignTransactionButton /> */}\n          <SendRequestForLottery\n            showLottery={showLottery}\n            lotteryContent={lotteryContent}\n            lotteryWay={lotteryWay}\n            setShowLottery={setShowLottery}\n            randomNumber={randomNumber}\n            setRandomNumber={setRandomNumber}\n          />\n          {!isSetLotteryWay(lotteryWay) ? (\n            <StartLottery\n              setShowLottery={setShowLottery}\n              lotteryContent={lotteryContent}\n              showLottery={showLottery}\n              setLotteryContent={setLotteryContent}\n              setLotteryWay={setLotteryWay}\n              setRandomNumber={setRandomNumber}\n              defaultInput={lotteryContentFromQuery}\n            />\n          ) : null}\n          {isChainLotteryWay(lotteryWay) ? (\n            <Grid container justifyContent=\"center\" spacing={2}>\n              <WalletMultiButton />\n              <WalletDisconnectButton />\n            </Grid>\n          ) : null}\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nconst InputText = ({ setValue, defaultInput }) => {\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        \"& .MuiTextField-root\": { m: 1, width: \"70ch\" },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          multiline\n          rows={6}\n          variant=\"filled\"\n          defaultValue={defaultInput}\n          onChange={(e) => {\n            setValue(JSON.parse(e.target.value));\n          }}\n        />\n      </div>\n    </Box>\n  );\n};\n\nconst setChainLotteryWay = (setLotteryWay) => {\n  setLotteryWay(\"chain\");\n};\n\nconst setFrontendLotteryWay = (setLotteryWay) => {\n  setLotteryWay(\"frontend\");\n};\n\nconst isChainLotteryWay = (lotteryWay) => {\n  return lotteryWay === \"chain\";\n};\n\nconst isSetLotteryWay = (lotteryWay) => {\n  return lotteryWay !== \"\";\n};\n\nconst isFrontendLotteryWay = (lotteryWay) => {\n  return lotteryWay === \"frontend\";\n};\n\nconst StartLottery = ({\n  lotteryContent,\n  showLottery,\n  setLotteryContent,\n  setLotteryWay,\n  setRandomNumber,\n  setShowLottery,\n  defaultInput,\n}) => {\n  const onClickForFrontendLottery = useCallback(() => {\n    setFrontendLotteryWay(setLotteryWay);\n    setRandomNumber(getRamdonContentNumber(lotteryContent));\n    setShowLottery(true);\n  });\n\n  const onClickForChainLottery = useCallback(() => {\n    setChainLotteryWay(setLotteryWay);\n  });\n\n  return showLottery ? null : (\n    <div>\n      <InputText setValue={setLotteryContent} defaultInput={defaultInput} />\n      <MButton variant=\"contained\" onClick={onClickForChainLottery}>\n        基於鏈上抽\n      </MButton>{\" \"}\n      <MButton variant=\"contained\" onClick={onClickForFrontendLottery}>\n        基於前端抽\n      </MButton>\n    </div>\n  );\n};\n\nconst getQueryFromURL = () => {\n  let urlParams = new URLSearchParams(window.location.search);\n  return urlParams;\n};\n\nexport default Main;\n","import \"./App.css\";\nimport Main from \"./components/Main\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport * as React from \"react\";\n\nfunction App() {\n  const darkTheme = createTheme({\n    palette: {\n      mode: \"dark\",\n    },\n  });\n\n  return (\n    <div className=\"App\">\n      {/* <ThemeProvider theme={darkTheme}> */}\n      <Main />\n      {/* </ThemeProvider> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { StyledEngineProvider } from \"@mui/material/styles\";\n\nReactDOM.render(\n  <StyledEngineProvider injectFirst>\n    <App />\n  </StyledEngineProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}